package uz.momoit.lms_canvas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AssignmentCommentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentCommentAllPropertiesEquals(AssignmentComment expected, AssignmentComment actual) {
        assertAssignmentCommentAutoGeneratedPropertiesEquals(expected, actual);
        assertAssignmentCommentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentCommentAllUpdatablePropertiesEquals(AssignmentComment expected, AssignmentComment actual) {
        assertAssignmentCommentUpdatableFieldsEquals(expected, actual);
        assertAssignmentCommentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentCommentAutoGeneratedPropertiesEquals(AssignmentComment expected, AssignmentComment actual) {
        assertThat(expected)
            .as("Verify AssignmentComment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentCommentUpdatableFieldsEquals(AssignmentComment expected, AssignmentComment actual) {
        assertThat(expected)
            .as("Verify AssignmentComment relevant properties")
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getCommentDate()).as("check commentDate").isEqualTo(actual.getCommentDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssignmentCommentUpdatableRelationshipsEquals(AssignmentComment expected, AssignmentComment actual) {
        assertThat(expected)
            .as("Verify AssignmentComment relationships")
            .satisfies(
                e -> assertThat(e.getSubmissionAssignment()).as("check submissionAssignment").isEqualTo(actual.getSubmissionAssignment())
            )
            .satisfies(e -> assertThat(e.getAssignment()).as("check assignment").isEqualTo(actual.getAssignment()))
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()))
            .satisfies(e -> assertThat(e.getTeacher()).as("check teacher").isEqualTo(actual.getTeacher()));
    }
}
