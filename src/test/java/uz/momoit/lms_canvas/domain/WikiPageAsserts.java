package uz.momoit.lms_canvas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WikiPageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWikiPageAllPropertiesEquals(WikiPage expected, WikiPage actual) {
        assertWikiPageAutoGeneratedPropertiesEquals(expected, actual);
        assertWikiPageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWikiPageAllUpdatablePropertiesEquals(WikiPage expected, WikiPage actual) {
        assertWikiPageUpdatableFieldsEquals(expected, actual);
        assertWikiPageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWikiPageAutoGeneratedPropertiesEquals(WikiPage expected, WikiPage actual) {
        assertThat(expected)
            .as("Verify WikiPage auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWikiPageUpdatableFieldsEquals(WikiPage expected, WikiPage actual) {
        assertThat(expected)
            .as("Verify WikiPage relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getWhoAllowed()).as("check whoAllowed").isEqualTo(actual.getWhoAllowed()))
            .satisfies(e -> assertThat(e.getAddToStudents()).as("check addToStudents").isEqualTo(actual.getAddToStudents()))
            .satisfies(e -> assertThat(e.getAddToStudentsDate()).as("check addToStudentsDate").isEqualTo(actual.getAddToStudentsDate()))
            .satisfies(e -> assertThat(e.getPublishedAt()).as("check publishedAt").isEqualTo(actual.getPublishedAt()))
            .satisfies(e -> assertThat(e.getPublished()).as("check published").isEqualTo(actual.getPublished()))
            .satisfies(e -> assertThat(e.getNotifyUsersChanges()).as("check notifyUsersChanges").isEqualTo(actual.getNotifyUsersChanges()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWikiPageUpdatableRelationshipsEquals(WikiPage expected, WikiPage actual) {
        assertThat(expected)
            .as("Verify WikiPage relationships")
            .satisfies(e -> assertThat(e.getCourse()).as("check course").isEqualTo(actual.getCourse()));
    }
}
