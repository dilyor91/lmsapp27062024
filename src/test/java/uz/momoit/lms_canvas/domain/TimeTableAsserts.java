package uz.momoit.lms_canvas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TimeTableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimeTableAllPropertiesEquals(TimeTable expected, TimeTable actual) {
        assertTimeTableAutoGeneratedPropertiesEquals(expected, actual);
        assertTimeTableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimeTableAllUpdatablePropertiesEquals(TimeTable expected, TimeTable actual) {
        assertTimeTableUpdatableFieldsEquals(expected, actual);
        assertTimeTableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimeTableAutoGeneratedPropertiesEquals(TimeTable expected, TimeTable actual) {
        assertThat(expected)
            .as("Verify TimeTable auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimeTableUpdatableFieldsEquals(TimeTable expected, TimeTable actual) {
        assertThat(expected)
            .as("Verify TimeTable relevant properties")
            .satisfies(e -> assertThat(e.getWeekNumber()).as("check weekNumber").isEqualTo(actual.getWeekNumber()))
            .satisfies(e -> assertThat(e.getWeekDayNumber()).as("check weekDayNumber").isEqualTo(actual.getWeekDayNumber()))
            .satisfies(e -> assertThat(e.getPairNumber()).as("check pairNumber").isEqualTo(actual.getPairNumber()))
            .satisfies(e -> assertThat(e.getActialDate()).as("check actialDate").isEqualTo(actual.getActialDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimeTableUpdatableRelationshipsEquals(TimeTable expected, TimeTable actual) {
        assertThat(expected)
            .as("Verify TimeTable relationships")
            .satisfies(e -> assertThat(e.getCourse()).as("check course").isEqualTo(actual.getCourse()))
            .satisfies(e -> assertThat(e.getTeacher()).as("check teacher").isEqualTo(actual.getTeacher()))
            .satisfies(e -> assertThat(e.getBuilding()).as("check building").isEqualTo(actual.getBuilding()))
            .satisfies(e -> assertThat(e.getRoom()).as("check room").isEqualTo(actual.getRoom()))
            .satisfies(e -> assertThat(e.getStudyTerm()).as("check studyTerm").isEqualTo(actual.getStudyTerm()));
    }
}
