package uz.momoit.lms_canvas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QuizSessionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizSessionAllPropertiesEquals(QuizSession expected, QuizSession actual) {
        assertQuizSessionAutoGeneratedPropertiesEquals(expected, actual);
        assertQuizSessionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizSessionAllUpdatablePropertiesEquals(QuizSession expected, QuizSession actual) {
        assertQuizSessionUpdatableFieldsEquals(expected, actual);
        assertQuizSessionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizSessionAutoGeneratedPropertiesEquals(QuizSession expected, QuizSession actual) {
        assertThat(expected)
            .as("Verify QuizSession auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizSessionUpdatableFieldsEquals(QuizSession expected, QuizSession actual) {
        assertThat(expected)
            .as("Verify QuizSession relevant properties")
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()))
            .satisfies(e -> assertThat(e.getQuizSessionEnum()).as("check quizSessionEnum").isEqualTo(actual.getQuizSessionEnum()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizSessionUpdatableRelationshipsEquals(QuizSession expected, QuizSession actual) {
        assertThat(expected)
            .as("Verify QuizSession relationships")
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()))
            .satisfies(e -> assertThat(e.getQuiz()).as("check quiz").isEqualTo(actual.getQuiz()));
    }
}
