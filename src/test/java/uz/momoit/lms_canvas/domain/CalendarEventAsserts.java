package uz.momoit.lms_canvas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CalendarEventAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCalendarEventAllPropertiesEquals(CalendarEvent expected, CalendarEvent actual) {
        assertCalendarEventAutoGeneratedPropertiesEquals(expected, actual);
        assertCalendarEventAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCalendarEventAllUpdatablePropertiesEquals(CalendarEvent expected, CalendarEvent actual) {
        assertCalendarEventUpdatableFieldsEquals(expected, actual);
        assertCalendarEventUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCalendarEventAutoGeneratedPropertiesEquals(CalendarEvent expected, CalendarEvent actual) {
        assertThat(expected)
            .as("Verify CalendarEvent auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCalendarEventUpdatableFieldsEquals(CalendarEvent expected, CalendarEvent actual) {
        assertThat(expected)
            .as("Verify CalendarEvent relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getEventFrequency()).as("check eventFrequency").isEqualTo(actual.getEventFrequency()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCalendarEventUpdatableRelationshipsEquals(CalendarEvent expected, CalendarEvent actual) {
        // empty method
    }
}
