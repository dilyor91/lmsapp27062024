package uz.momoit.lms_canvas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AnnouncementStudentReadAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementStudentReadAllPropertiesEquals(AnnouncementStudentRead expected, AnnouncementStudentRead actual) {
        assertAnnouncementStudentReadAutoGeneratedPropertiesEquals(expected, actual);
        assertAnnouncementStudentReadAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementStudentReadAllUpdatablePropertiesEquals(
        AnnouncementStudentRead expected,
        AnnouncementStudentRead actual
    ) {
        assertAnnouncementStudentReadUpdatableFieldsEquals(expected, actual);
        assertAnnouncementStudentReadUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementStudentReadAutoGeneratedPropertiesEquals(
        AnnouncementStudentRead expected,
        AnnouncementStudentRead actual
    ) {
        assertThat(expected)
            .as("Verify AnnouncementStudentRead auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementStudentReadUpdatableFieldsEquals(
        AnnouncementStudentRead expected,
        AnnouncementStudentRead actual
    ) {
        assertThat(expected)
            .as("Verify AnnouncementStudentRead relevant properties")
            .satisfies(e -> assertThat(e.getRead()).as("check read").isEqualTo(actual.getRead()))
            .satisfies(e -> assertThat(e.getReadAt()).as("check readAt").isEqualTo(actual.getReadAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnnouncementStudentReadUpdatableRelationshipsEquals(
        AnnouncementStudentRead expected,
        AnnouncementStudentRead actual
    ) {
        assertThat(expected)
            .as("Verify AnnouncementStudentRead relationships")
            .satisfies(e -> assertThat(e.getAnnouncement()).as("check announcement").isEqualTo(actual.getAnnouncement()))
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()));
    }
}
