package uz.momoit.lms_canvas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LessonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonAllPropertiesEquals(Lesson expected, Lesson actual) {
        assertLessonAutoGeneratedPropertiesEquals(expected, actual);
        assertLessonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonAllUpdatablePropertiesEquals(Lesson expected, Lesson actual) {
        assertLessonUpdatableFieldsEquals(expected, actual);
        assertLessonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonAutoGeneratedPropertiesEquals(Lesson expected, Lesson actual) {
        assertThat(expected)
            .as("Verify Lesson auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonUpdatableFieldsEquals(Lesson expected, Lesson actual) {
        assertThat(expected)
            .as("Verify Lesson relevant properties")
            .satisfies(e -> assertThat(e.getLessonTitle()).as("check lessonTitle").isEqualTo(actual.getLessonTitle()))
            .satisfies(e -> assertThat(e.getStartPlanDate()).as("check startPlanDate").isEqualTo(actual.getStartPlanDate()))
            .satisfies(e -> assertThat(e.getActualLessonDate()).as("check actualLessonDate").isEqualTo(actual.getActualLessonDate()))
            .satisfies(e -> assertThat(e.getLessonType()).as("check lessonType").isEqualTo(actual.getLessonType()))
            .satisfies(e -> assertThat(e.getVideoUrl()).as("check videoUrl").isEqualTo(actual.getVideoUrl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLessonUpdatableRelationshipsEquals(Lesson expected, Lesson actual) {
        assertThat(expected)
            .as("Verify Lesson relationships")
            .satisfies(e -> assertThat(e.getCourse()).as("check course").isEqualTo(actual.getCourse()));
    }
}
