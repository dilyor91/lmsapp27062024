package uz.momoit.lms_canvas.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class QuizResultAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizResultAllPropertiesEquals(QuizResult expected, QuizResult actual) {
        assertQuizResultAutoGeneratedPropertiesEquals(expected, actual);
        assertQuizResultAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizResultAllUpdatablePropertiesEquals(QuizResult expected, QuizResult actual) {
        assertQuizResultUpdatableFieldsEquals(expected, actual);
        assertQuizResultUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizResultAutoGeneratedPropertiesEquals(QuizResult expected, QuizResult actual) {
        assertThat(expected)
            .as("Verify QuizResult auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizResultUpdatableFieldsEquals(QuizResult expected, QuizResult actual) {
        assertThat(expected)
            .as("Verify QuizResult relevant properties")
            .satisfies(e -> assertThat(e.getPoint()).as("check point").isEqualTo(actual.getPoint()))
            .satisfies(e -> assertThat(e.getTotalQuestionCnt()).as("check totalQuestionCnt").isEqualTo(actual.getTotalQuestionCnt()))
            .satisfies(e -> assertThat(e.getCorrectAnswerCnt()).as("check correctAnswerCnt").isEqualTo(actual.getCorrectAnswerCnt()))
            .satisfies(e -> assertThat(e.getWrongAnswerCnt()).as("check wrongAnswerCnt").isEqualTo(actual.getWrongAnswerCnt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQuizResultUpdatableRelationshipsEquals(QuizResult expected, QuizResult actual) {
        assertThat(expected)
            .as("Verify QuizResult relationships")
            .satisfies(e -> assertThat(e.getQuiz()).as("check quiz").isEqualTo(actual.getQuiz()))
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()))
            .satisfies(e -> assertThat(e.getQuizSession()).as("check quizSession").isEqualTo(actual.getQuizSession()));
    }
}
